name: Build and deploy Python app to Azure Web App - weatherAgentBackend (with staging slot)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create deployment package
        run: |
          zip -r release.zip . -x "*.git*" ".dockerignore" "*.pyc*" "__pycache__/*" "*/__pycache__/*" "frontend/*" "venv/*" ".github/*"
          
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          
      - name: Unzip artifact for deployment
        run: unzip release.zip
          
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_FC21908EFFDF4AD0AD7517282E2AC2D3 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_50A26D7CBE9F478E85F42E26413BF8B5 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_FA776D95D0B64F77B543719AF2BC255B }}
          
      - name: Deploy to staging slot
        uses: azure/webapps-deploy@v3
        id: deploy-to-staging
        with:
          app-name: 'weatherAgentBackend'
          slot-name: 'staging'  # Deploy to staging slot first
          package: '.'
          
      - name: Swap staging to production
        run: |
          az webapp deployment slot swap --name weatherAgentBackend --resource-group $(az webapp show --name weatherAgentBackend --query resourceGroup --output tsv) --slot staging --target-slot production
